generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            String         @id @default(cuid()) @db.VarChar(128)
  email         String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  role          AdminRole      @default(ADMIN)
  isActive      Boolean        @default(true)
  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt

  @@index([email], name: "admin_email_idx")
  @@map("admins")
}

model RefreshToken {
  id        String   @id @default(cuid()) @db.VarChar(128)
  token     String   @unique @db.VarChar(500)
  adminId   String   @db.VarChar(128)
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)

  @@index([adminId], name: "refresh_token_admin_idx")
  @@index([token], name: "refresh_token_token_idx")
  @@map("refresh_tokens")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

model User {
  id                      String     @id @default(cuid()) @db.VarChar(128)
  telegramId              String     @unique @db.VarChar(255)
  username                String?    @db.VarChar(255)
  firstName               String?    @db.VarChar(255)
  lastName                String?    @db.VarChar(255)
  photoUrl                String?    @db.Text
  languageCode            String?    @db.VarChar(10)
  isPremium               Boolean    @default(false)
  points                  Int        @default(0)
  pointsHistory           PointsHistory[]
  xp                      Int        @default(0)
  xpHistory               XpHistory[]
  tasks                   UserTask[]
  // Referral system (Self-relation)
  referralCode            String     @unique @db.VarChar(50)
  referralCount           Int        @default(0)
  referredById            String?    @db.VarChar(128)
  referredBy              User?      @relation("UserReferrals", fields: [referredById], references: [id], onDelete: SetNull)
  referrals               User[]     @relation("UserReferrals")
  referralsMade           Referral[] @relation("ReferrerReferrals")
  referralsReceived       Referral[] @relation("ReferredReferrals")
  // purchases
  purchases               Purchase[]
  // Points history
  // Daily bonus
  lastDailyClaimAt        DateTime?
  dailyStreak             Int        @default(0)
  // Airdrop wallet
  walletAddress           String?    @db.VarChar(255)
  walletConnectedAt       DateTime?
  // Payment wallet (TON Connect)
  paymentWalletAddress    String?    @db.VarChar(255)
  paymentWalletVerified   Boolean    @default(false)
  paymentWalletVerifiedAt DateTime?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @default(now()) @updatedAt

  @@index([telegramId], name: "user_telegram_id_idx")
  @@index([referralCode], name: "user_referral_code_idx")
  @@index([points(sort: Desc), createdAt(sort: Asc)], name: "user_leaderboard_idx")
  @@index([paymentWalletAddress], name: "user_payment_wallet_idx")
  @@map("users")
}

model XpHistory {
  id          String   @id @default(cuid()) @db.VarChar(128)
  userId      String   @db.VarChar(128)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        XpType
  amount      Int
  description String?  @db.VarChar(500)
  createdAt   DateTime @default(now())

  @@index([userId], name: "xp_history_user_idx")
  @@index([type], name: "xp_history_type_idx")
  @@index([createdAt(sort: Desc)], name: "xp_history_created_at_idx")
  @@map("xp_history")
}

enum XpType {
  MATCH_PARTICIPATION
  MATCH_WIN
  MATCH_LOSS
  ACHIEVEMENT
  DAILY_BONUS
  TASK_COMPLETION
  REFERRAL
  PURCHASE_BONUS
  ADMIN_ADJUSTMENT
}

model PointsHistory {
  id          String     @id @default(cuid()) @db.VarChar(128)
  userId      String     @db.VarChar(128)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        PointsType
  amount      Int
  description String?    @db.VarChar(500)
  createdAt   DateTime   @default(now())

  @@index([userId], name: "points_history_user_idx")
  @@index([type], name: "points_history_type_idx")
  @@index([createdAt(sort: Desc)], name: "points_history_created_at_idx")
  @@map("points_history")
}

enum PointsType {
  DAILY
  REFERRAL
  TASK_COMPLETION
  PURCHASE
  BONUS
  ADMIN_ADJUSTMENT
}

model Purchase {
  id                      String                @id @default(cuid()) @db.VarChar(128)
  userId                  String                @db.VarChar(128)
  user                    User                  @relation(fields: [userId], references: [id])
  type                    PurchaseType
  amount                  Int                   @default(0)
  price                   Decimal?              @db.Decimal(20, 9)
  currency                PurchaseCurrencyType?
  // Telegram Stars payment fields
  telegramPaymentChargeId String?               @unique @db.VarChar(255)
  invoicePayload          Json?
  // TON payment fields
  tonTransactionHash      String?               @unique @db.VarChar(255)
  tonFromAddress          String?               @db.VarChar(255)
  tonAmount               Decimal?              @db.Decimal(20, 9)
  tonVerifiedAt           DateTime?
  status                  PurchaseStatus        @default(PENDING)
  createdAt               DateTime              @default(now())
  completedAt             DateTime?

  @@index([userId], name: "purchase_user_idx")
  @@index([status], name: "purchase_status_idx")
  @@index([type], name: "purchase_type_idx")
  @@index([telegramPaymentChargeId], name: "purchase_telegram_payment_idx")
  @@index([tonTransactionHash], name: "purchase_ton_hash_idx")
  @@index([tonFromAddress], name: "purchase_ton_address_idx")
  @@map("purchases")
}

enum PurchaseCurrencyType {
  STARS
  TON
}

enum PurchaseType {
  TELEGRAM_STARS
  TON_PAYMENT
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  REFUNDED
  FAILED
}

model Referral {
  id           String   @id @default(cuid()) @db.VarChar(128)
  referrerId   String   @db.VarChar(128)
  referrer     User     @relation("ReferrerReferrals", fields: [referrerId], references: [id])
  referredId   String   @db.VarChar(128)
  referred     User     @relation("ReferredReferrals", fields: [referredId], references: [id])
  codeUsed     String?
  pointsAmount Int      @default(1000)
  claimedAt    DateTime @default(now())

  @@unique([referrerId, referredId], name: "referral_unique")
  @@index([referrerId], name: "referral_referrer_idx")
  @@index([referredId], name: "referral_referred_idx")
  @@map("referrals")
}

model UserTask {
  id          String    @id @default(cuid()) @db.VarChar(128)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id])
  completed   Boolean   @default(false)
  completedAt DateTime?

  @@unique([userId, taskId])
  @@index([userId], name: "user_task_user_idx")
  @@index([taskId], name: "user_task_task_idx")
  @@index([completed], name: "user_task_completed_idx")
  @@map("user_tasks")
}

model Task {
  id        String     @id @default(cuid()) @db.VarChar(128)
  type      String
  target    String
  reward    Int
  userTasks UserTask[]

  @@index([type], name: "task_type_idx")
  @@index([target], name: "task_target_idx")
  @@map("tasks")
}
